
loadi(61,2); //Loading disk free list

loadi (63,13); //Loading library
loadi (64,14);

loadi (4,17); //Loading Timer Interrupt
loadi (5,18);

loadi (65,7); //Loading INIT Program
loadi (66,8);

loadi (22,35); //Interrupt10 : Exit syscall
loadi (23,36);

loadi(2,15); //Exception Handler
loadi(3,16);

loadi(16,29); //Loading INT7 i.e Syscall for Write
loadi(17,30);

//loadi(69,11); //Loading Idle Code
//loadi(70,12);

loadi(54,67); //Loading the boot module i.e (module 7)
loadi(55,68);

loadi(85,69); //Loading 1st user program, exe.xsm(print even). Code=page 85; heap= 83,84; stack= 86,87; UAP = 88

loadi(91,70); //Loading 2nd user program, prime.xsm. Code=page 91;heap =89,90; stack = 92,93, UAP = 94

loadi(50,63); //Loading Module 5, Scheduler/Context switch module
loadi(51,64);

loadi(40,53); //Loading Module 0, Resource Manager
loadi(41,54);

loadi(48,61); //Loading Module 4, Device Manager
loadi(49,62);

loadi(8,21); //Loading Console Interrupt routine
loadi(9,22);

loadi(14,27); //Loading INT6, Terminal Read
loadi(15,28);

loadi(20,33); //Loading INT9, Exec System Call
loadi(21,34);

loadi(42,55); //Loading Module 1, Process Manager
loadi(43,56);

loadi(44,57); //Loading Module 2, Memory Manager
loadi(45,58);

loadi(59,3); //Loading Inode + User Table
loadi(60,4);

loadi(6,19); //Loading Disk INT routine
loadi(7,20);

loadi(18,31); //Loading Fork syscall/ Interrupt 8 routine
loadi(19,32);

alias i R0;
i=0;

[SYSTEM_STATUS_TABLE + 2] = 0 ; 

while(i < 128) do
    if(i < 83) then
        [MEMORY_FREE_LIST + i] = 1 ;
    else 
        [MEMORY_FREE_LIST + i] = 0 ;
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;
  i = i + 1;
endwhile;  

[SYSTEM_STATUS_TABLE + 3] = 0 ;
[TERMINAL_STATUS_TABLE +1] = 0; //Indicates that the terminal is free before scheduling the first process
[DISK_STATUS_TABLE] = 0 ; 

//Initializing the per-process Resource table of init

i=0;
alias init_perprocess R1 ;

init_perprocess = [PROCESS_TABLE + 16 +11]*512 + RESOURCE_TABLE_OFFSET ;

while(i < 16)do
    [init_perprocess + i] = -1 ;
    i = i +2 ;
endwhile;


//Set up Disk Map table
alias diskMapTable R2;
diskMapTable = DISK_MAP_TABLE + 10 ;

[diskMapTable + 0] = -1;            // Unused
[diskMapTable + 1] = -1;            // Unused
[diskMapTable + 2] = -1;            // Heap 1
[diskMapTable + 3] = -1;            // Heap 2
[diskMapTable + 4] =  7;            // Code 1
[diskMapTable + 5] =  8;            // Code 2
[diskMapTable + 6] = -1;            // Code 3
[diskMapTable + 7] = -1;            // Code 4
[diskMapTable + 8] = -1;            // Stack 1
[diskMapTable + 9] = -1;            // Stack 2


PTBR = PAGE_TABLE_BASE + 20; //For init process. As idle occupies PTBR
PTLR = 10 ;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0100";
[PTBR+6] = 79;
[PTBR+7] = "0100";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1] =1 ; //PID is 1 for init process
[PROCESS_TABLE + 16 + 4] = CREATED ; //As the first scheduled process is Idle code
[PROCESS_TABLE + 16 + 13] = 8*512 ; //Same because the Stack is residing in logical page 8 of virtual mem
[PROCESS_TABLE + 16 + 12] = 0 ; //KPTR value is set to 0 as always
[PROCESS_TABLE + 16 + 14] = PTBR ; //The current value of PTBR is set to PTBR + 20
[PROCESS_TABLE + 16 + 15] = 10 ; //As always 10(ABI convention)
[PROCESS_TABLE + 16 + 11] = 80 ; //Setting the user area page as 80
[76 * 512] = [65 * 512 + 1] ;


[PROCESS_TABLE + 2*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 3*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 4*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 5*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 6*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 7*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 8*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 9*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 10*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 11*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 12*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 13*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 14*16 + 4] = TERMINATED ;
[PROCESS_TABLE + 15*16 + 4] = TERMINATED ;

return;

