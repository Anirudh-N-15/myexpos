alias functionNum R1;
alias currentPID R2;
alias pagenum R3;
alias blocknum R4;

if(functionNum == DISK_LOAD) then
   multipush(R1,R2,R3,R4);
   R1 = 3; //Function number of Acquire disk
   R2 = currentPID ;
   call MOD_0;
   multipop(R1,R2,R3,R4); 
   [DISK_STATUS_TABLE +2] = pagenum;
   [DISK_STATUS_TABLE +3] = blocknum;
   [DISK_STATUS_TABLE +1] = 0 ;

    //print pagenum ;
    //print blocknum;
   load(pagenum, blocknum);

   [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK ;
   multipush(R1,R2,R3,R4);
   call MOD_5 ;
   multipop(R1,R2,R3,R4);

   return;
endif;    

//Terminal_read = 4
if(functionNum == 4) then
	multipush(R0,R1,R2,R3);
    R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R0,R1,R2,R3);
	read;
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL ;
	//Invoking the context switch module (check for step 8)
	multipush(R0,R1,R2,R3);
	call MOD_5 ;
	multipop(R0,R1,R2,R3);
	
	alias word R4 ;
	word = ([PTBR + (R3)*2/512])*512 + (R3)%512 ;
	[word] = [PROCESS_TABLE + currentPID * 16 + 8] ;
	
	return;
endif;	

//Terminal_Write =3
if(functionNum == 3) then
	multipush(R0, R1, R2, R3);
	R1 = 8;
	R2 = currentPID;
	call MOD_0;
	multipop(R0,R1,R2,R3);
    print R3;
    multipush(R0, R1, R2, R3);
    R1 =9 ;
    R2 = currentPID ;
    call MOD_0 ;

    multipop(R0, R1, R2, R3);
    return;
endif;

