//exec system call
alias userSP R0;
alias arg1 R1;

userSP = SP ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP; //Saving SP
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11] * 512  -1 ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9; //Setting mode flag to syscall num 9(exec)

arg1 = [ [PTBR + (userSP-4)*2/512]*512 + (userSP-4)%512 ] ; //Name of file is arg1

alias i R8 ;
alias flag R3 ;
alias inode R4;
i =0;

while(i < MAX_FILE_NUM) do
    if( [INODE_TABLE + i*16 +1] == arg1) then
        inode = i ; //saving the inode index of the file 
        flag= 1;
        break;
    endif;    
    i = i +1;
endwhile;


if(flag == 0) then
    SP =[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] ;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0 ;
    [[PTBR + (userSP -1)*2/512]*512 + (userSP-1)%512] = -1 ;
    ireturn;
endif;

//exit syscall
multipush(R0,R1,R2,R3,R4);

R1 = EXIT_PROCESS ;
R2 = [SYSTEM_STATUS_TABLE +1];

call MOD_1;

multipop(R0,R1,R2,R3,R4);

alias uap R5 ;

//Incrementing memory free list
uap = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11];
[MEMORY_FREE_LIST + uap] = 1;

//Incremeting memory free count
[SYSTEM_STATUS_TABLE +2] = [SYSTEM_STATUS_TABLE + 2] +1 ;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11]*512 -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 7] = inode; 

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
multipush(R0,R1,R2,R3,R4,R5);
R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE +1];
call MOD_2 ;
[PTBR + 4] = R0 ;
[PTBR + 5] = "0110" ;
multipop(R0,R1,R2,R3,R4,R5);


multipush(R0,R1,R2,R3,R4,R5,R7,R8,R9);
R1= GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE +1];
call MOD_2;
[PTBR + 6] = R0;
[PTBR + 7] = "0110";
multipop(R0,R1,R2,R3,R4,R5,R7,R8,R9);

i=0;

while(i < 4) do
    if( [ INODE_TABLE + inode*16 + 8 +i] != -1) then
        multipush(R0,R1,R2,R3,R4,R5);
        R1 = GET_FREE_PAGE ;
        R2 = [SYSTEM_STATUS_TABLE +1];
        call MOD_2 ;

        [PTBR + 8 + i*2] = R0 ;
        [PTBR + 8 + i*2 + 1] = "0100"; 
         multipop(R0,R1,R2,R3,R4,R5);
    else
        multipush(R0,R1,R2,R3,R4,R5);
        R1 = GET_FREE_PAGE ;
        R2 = [SYSTEM_STATUS_TABLE +1];
        call MOD_2 ;

        multipop(R0,R1,R2,R3,R4,R5);  //Just check whether to place after assigning page values

        [PTBR + 8 + i*2] = -1 ;
        [PTBR + 8 + i*2 + 1] = "0000";
    endif;

    i = i + 1;
endwhile;  
//Allocating pages for stack

multipush(R0,R1,R2,R3,R4,R5);
R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE +1];
call MOD_2 ;
[PTBR + 16] = R0 ;
[PTBR + 17] = "0110";
multipop(R0,R1,R2,R3,R4,R5);

multipush(R0,R1,R2,R3,R4,R5);
R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE +1];
call MOD_2;
[PTBR + 18] = R0 ;
[PTBR + 19] = "0110" ;
multipop(R0,R1,R2,R3,R4,R5);

breakpoint;

i=0;
PTBR = PAGE_TABLE_BASE + 20 ;

while(i < 4) do 
    if([INODE_TABLE + inode*16 + 8 + i*2] != -1) then
        loadi([PTBR + 8 + i*2], [INODE_TABLE + inode*16 + 8 + i]);
    endif;
    i = i + 1;
endwhile;

[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) +9 ] = 0;
SP = 8*512;
ireturn;
