//exec system call
alias userSP R0;
alias arg1 R1;

userSP = SP ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP; //Saving SP
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11] * 512  -1 ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9; //Setting mode flag to syscall num 9(exec)

arg1 = [ [PTBR + (userSP-4)*2/512]*512 + (userSP-4)%512 ] ; //Name of file is arg1

alias i R8 ;
alias flag R3 ;
alias inode R4;
i =0;

while(i < MAX_FILE_NUM) do
    if( [INODE_TABLE + i*16 +1] == arg1) then
        inode = i ; //saving the inode index of the file 
        flag= 1;
        break;
    endif;    
    i = i +1;
endwhile;


if(flag == 0) then
    SP =[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] ;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0 ;
    [[PTBR + (userSP -1)*2/512]*512 + (userSP-1)%512] = -1 ;
    ireturn;
endif;

//exit syscall
multipush(R0,R1,R2,R3,R4);
R1 = EXIT_PROCESS ;
R2 = [SYSTEM_STATUS_TABLE +1];
call MOD_1;
multipop(R0,R1,R2,R3,R4);

alias uap R5 ;


uap = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11]; //Incrementing mem free list
[MEMORY_FREE_LIST + uap] = 1;
[SYSTEM_STATUS_TABLE +2] = [SYSTEM_STATUS_TABLE + 2] +1 ; //Incrementing mem free count

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11]*512 -1; //Set SP to new kernel stack


//Initializing all entries with -1
i=0;
while(i < 16) do
    [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11 ] * 512 + RESOURCE_TABLE_OFFSET + i] = -1;
    i = i + 1;
endwhile;

//Set status of new process status and inode index
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 7] = inode; 


//Acquire User Stack Pages

multipush(R0,R1,R2,R3,R4,R5,R8);
R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_2 ;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = GET_FREE_PAGE;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_2 ;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

multipop(R0,R1,R2,R3,R4,R5,R8);

//To obtain the corresponding Code Block
alias codeBlock R9;
codeBlock = [INODE_TABLE + inode*16 + 8];

//Load codeBlock to mem and get the corresponding 

alias codePageNum R10;
multipush(R0,R1,R2,R3,R4,R5);
R1 = GET_CODE_PAGE;
R2 = codeBlock ;
call MOD_2;
codePageNum = R0;

//print R0;

multipop(R0,R1,R2,R3,R4,R5);

//Setting up the page table

[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//print codePageNum ;

[PTBR + 8] = codePageNum;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Setting up the Disk Map table
alias diskMapTable R9 ;

diskMapTable = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 ;

[diskMapTable + 0] = -1;                                      //Unused
[diskMapTable + 1] = -1;                                      //Unused
[diskMapTable + 2] = -1;                                      //Heap 1
[diskMapTable + 3] = -1;                                      //Heap 2
[diskMapTable + 4] = [INODE_TABLE + inode * 16 +  8];           //Code 1
[diskMapTable + 5] = [INODE_TABLE + inode * 16 +  9];           //Code 2
[diskMapTable + 6] = [INODE_TABLE + inode * 16 +  10];          //Code 3
[diskMapTable + 7] = [INODE_TABLE + inode * 16 +  11];          //Code 4
[diskMapTable + 8] = -1;                                      //Stack 1
[diskMapTable + 9] = -1;                                      //Stack 2  

breakpoint;

[[PTBR + 16] * 512] = [[PTBR + 8 ] * 512  +1];

SP = 8 * 512 ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE]* 16 + 9] = 0 ;

//print " in int9 3";
breakpoint;
ireturn ;

