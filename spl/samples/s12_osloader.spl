loadi (63,13); //Loading library
loadi (64,14);

loadi (4,17); //Loading Timer Interrupt
loadi (5,18);

loadi (65,7); //Loading INIT Program
loadi (66,8);

loadi (22,35); //Interrupt10 : Exit syscall
loadi (23,36);

loadi(2,15); //Exception Handler
loadi(3,16);

loadi(16,29); //Loading INT7 i.e Syscall for Write
loadi(17,30);

loadi(69,11); //Loading Idle Code 
loadi(70,12);
// 7 entries for Loading to memory from stage 12 onwards


//The below code is written wrt idle code
PTBR = PAGE_TABLE_BASE ;
PTLR = 10 ;

//Library
[PTBR+0] = -1;       //As Idle Process doesn't require any library or Heap
[PTBR+1] = "0000" ;
[PTBR+2] = -1;
[PTBR+3] = "0000" ;

//Heap
[PTBR+4] = -1;       //As Idle Process doesn't require any library or Heap
[PTBR+5] = "0000" ;
[PTBR+6] = -1;
[PTBR+7] = "0000" ;

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100" ;
[PTBR+10] = 70;
[PTBR+11] = "0100" ;
[PTBR+12] = -1;
[PTBR+13] = "0000" ;
[PTBR+14] = -1;
[PTBR+15] = "0000" ;

//Stack
[PTBR+16] = 81 ;
[PTBR+17] = "0110" ;
[PTBR+18] = -1 ;
[PTBR+19] = "0000" ;

[PROCESS_TABLE + 1] = 0 ;  //PID of Idle process is 0 always
[PROCESS_TABLE +11] = 82 ; //User Area Page Number is set to 82 in PCB's 11th entry
[PROCESS_TABLE + 4] = CREATED ; //Setting the status of idle process as Created
[PROCESS_TABLE + 13] = 8*512 ; //Stack is residing in logical page 8
[PROCESS_TABLE + 12] = 0 ; //KPTR for Idle process is 0
[PROCESS_TABLE + 14] = PTBR ;
[PROCESS_TABLE + 15] = 10 ;

[81 * 512 ] = [69*512 +1] ; //Setting the IP value from Header of idle process to top of user stack of idle process

//The below code is written wrt to INIT process
PTBR = PAGE_TABLE_BASE + 20 ; //if this works : ))))

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0100";
[PTBR+6] = 79;
[PTBR+7] = "0100";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE + 16 + 1] =1 ; //PID is 1 for init process
[PROCESS_TABLE + 16 + 4] = RUNNING ; //Init process is the first running process
[PROCESS_TABLE + 16 + 13] = 8*512 ; //Same because the Stack is residing in logical page 8 of virtual mem
[PROCESS_TABLE + 16 + 12] = 0 ; //KPTR value is set to 0 as always 
[PROCESS_TABLE + 16 + 14] = PTBR ; //The current value of PTBR is set to PTBR + 20
[PROCESS_TABLE + 16 + 15] = 10 ; //As always 10(ABI convention)

[76*512] = [65*512 +1] ; //IP is set to point to second instruction of code of INIT process
SP = 8 * 512 ;
[SYSTEM_STATUS_TABLE + 1] = 1 ; //PID for INIT has to be set to 1

ireturn ; //To transfer control to INIT process

